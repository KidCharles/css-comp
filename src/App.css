.box_model {
  width: 200px;
  height: 200px;
  background-color: rgb(101, 101, 158);
  /* float: right; */
  margin: 80px;
  border: 8px;
  border-style: dotted;
  padding: 20px;
  box-sizing: border-box;
}

.filthyCasualP {
  font-weight: 700;
  color: whitesmoke;
  font-size: 40px;
  /* background-image:; */
}

.backgroundImg {
  height: 200px;
  background-size: contain;
  background-image: url("https://i.pinimg.com/originals/ac/17/e8/ac17e809a2302e4309dff943e85f8f13.jpg");
}

.shape {
  width: 80px;
  height: 80px;
  padding: 20px;
}

.blue {
  background-color: rgba(70, 131, 180, 0.562);
}
.red {
  background-color: rgba(180, 70, 70, 0.562);
}
.yellow {
  background-color: rgba(164, 180, 70, 0.562);
}
.green {
  background-color: rgba(70, 180, 103, 0.562);
}

.flex {
  display: flex;
}

.shapes {
  width: 100vw;
  height: 800px;
}
/* position */

/* static	Default value. Elements render in order, as they appear in the document flow */

/* relative	The element is positioned relative to its normal position, so "left:20px" adds 20 pixels to the element's LEFT position */
.relative {
  position: relative;
  left: 40px;
}

/* absolute	The element is positioned relative to its first positioned (not static) ancestor element */
.absolute {
  position: absolute;
  left: 2px;
}

/* fixed	The element is positioned relative to the browser window */
.fixed {
  position: fixed;
}

/* sticky	The element is positioned based on the user's scroll position
A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed). */
.sticky {
  position: sticky;
  top: 20px;
}


